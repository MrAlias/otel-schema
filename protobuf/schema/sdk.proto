syntax = "proto3";

package opentelemetry.proto.sdk.v1;

option java_multiple_files = true;
option java_package = "io.opentelemetry.proto.sdk.v1";
option java_outer_classname = "SdkConfigProto";

message Config {
  SdkConfig sdk = 1;
}

message SdkConfig {
  bool disabled = 1;
  Resource resource = 2;
  Logging logging = 3;
  AttributeLimits attribute_limits = 4;
  TracerProvider tracer_provider = 5;
  MeterProvider meter_provider = 6;
  LoggerProvider logger_provider = 7;
  repeated Propagator propagators = 8;
}

message Resource {
  repeated ResourceDetector detectors = 1;

  message ResourceDetector {
    string name = 1;
    repeated string excluded_attribute_keys = 2;
  }

  map<string, AttributeValue> attributes = 2;

  message AttributeValue {
    oneof Value {
      string string_value = 1;
      bool bool_value = 2;
      int64 int_value = 3;
      double double_value = 4;
    }
  }

  string schema_url = 3;
}

message Logging {
  string level = 1;
}

message AttributeLimits {
  uint32 attribute_count_limit = 1;
  uint32 attribute_value_length_limit = 2;
}

message ArgsValue {
  oneof value {
    string string_value = 1;
    bool bool_value = 2;
    int64 int_value = 3;
    double double_value = 4;
  }
}

message Propagator {
  PropagatorType propagator = 1;

  enum PropagatorType {
    UNSPECIFIED_PROPAGATOR = 0;
    TRACECONTEXT = 1;
    BAGGAGE = 2;
  }
}

message TracerProvider {
  repeated SpanProcessor span_processors = 1;

  message SpanProcessor {

    SpanProcessorType processor = 1;

    enum SpanProcessorType {
      UNSPECIFIED_PROCESSOR = 0;
      BATCH = 1;
      SIMPLE = 2;
      EXTENSION_PROCESSOR = 3;
    }

    oneof span_processor {
      // Ignored if processor is not BATCH
      BatchSpanProcessorArgs batch_processor_args = 2;

      // Ignored if processor is not SIMPLE
      SimpleSpanProcessorArgs simple_processor_args = 3;

      // Ignored if processor is not EXTENSION
      ExtensionSpanProcessorArgs extension_processor_args = 4;
    }

    message SimpleSpanProcessorArgs {
      SpanExporterType exporter = 1;

      oneof span_exporter_args {
        // Ignored if exporter is not OTLP
        OtlpSpanExporterArgs otlp_exporter_args = 2;

        // Ignored if exporter is not ZIPKIN
        ZipkinSpanExporterArgs zipkin_exporter_args = 3;

        // Ignored if exporter is not EXTENSION
        ExtensionSpanExporterArgs extension_exporter_args = 4;
      }
    }

    message BatchSpanProcessorArgs {
      SpanExporterType exporter = 1;

      oneof span_exporter_args {
        // Ignored if exporter is not OTLP
        OtlpSpanExporterArgs otlp_exporter_args = 2;

        // Ignored if exporter is not ZIPKIN
        ZipkinSpanExporterArgs zipkin_exporter_args = 3;

        // Ignored if exporter is not EXTENSION
        ExtensionSpanExporterArgs extension_exporter_args = 4;
      }

      uint32 max_queue_size = 5;
      uint32 scheduled_delay_millis = 6;
      uint32 export_timeout_millis = 7;
      uint32 max_export_batch_size = 8;
    }

    message ExtensionSpanProcessorArgs {
      string name = 1;
      map<string, ArgsValue> args = 2;
    }

    enum SpanExporterType {
      UNSPECIFIED_EXPORTER = 0;
      OTLP = 1;
      ZIPKIN = 2;
      EXTENSION_EXPORTER = 3;
    }

    message OtlpSpanExporterArgs {
      string endpoint = 1;
      bool insecure = 2;
      string certificate = 3;
      string client_key = 4;
      string client_certificate = 5;
      map<string, string> headers = 6;
      string compression = 7;
      string protocol = 8;
    }

    message ZipkinSpanExporterArgs {
      string endpoint = 1;
      uint64 timeout = 2;
    }

    message ExtensionSpanExporterArgs {
      string name = 1;
      map<string, ArgsValue> args = 2;
    }
  }

  SamplerType sampler = 2;

  enum SamplerType {
    UNSPECIFIED_SAMPLER = 0;
    PARENT_BASED = 1;
    ALWAYS_ON = 2;
    ALWAYS_OFF = 3;
    TRACE_ID_RATIO_BASED = 4;
    EXTENSION_SAMPLER = 5;
  }

  oneof sampler_args {
    // Ignored if root_sampler is not TRACE_ID_RATIO
    TraceIdRatioBasedSamplerArgs trace_id_ratio_based_sampler_args = 3;

    // Ignored if root_sampler is not PARENT_BASED
    ParentBasedSamplerArgs parent_based_sampler_args = 4;

    // Ignored if root_sampler is not EXTENSION
    TraceIdRatioBasedSamplerArgs extension_sampler_args = 5;
  }

  message ParentBasedSamplerArgs {
    SamplerType root_sampler = 1;

    oneof root_sampler_args {
      // Ignored if root_sampler is not TRACE_ID_RATIO
      TraceIdRatioBasedSamplerArgs trace_id_ratio_based_sampler_args = 2;

      // Ignored if root_sampler is not PARENT_BASED
      ParentBasedSamplerArgs parent_based_sampler_args = 3;

      // Ignored if root_sampler is not EXTENSION
      TraceIdRatioBasedSamplerArgs extension_sampler_args = 4;
    }

    bool remote_parent_sampled = 5;
    bool remote_parent_not_sampled = 6;
    bool local_parent_sampled = 7;
    bool local_parent_not_sampled = 8;
  }

  message TraceIdRatioBasedSamplerArgs {
    double ratio = 1;
  }

  message ExtensionSamplerArgs {
    string name = 1;
    map<string, ArgsValue> args = 2;
  }

  SpanLimits span_limits = 6;

  message SpanLimits {
    uint32 attribute_count_limit = 1;
    uint32 attribute_value_length_limit = 2;
    uint32 attribute_count_per_event_limit = 3;
    uint32 attribute_count_per_link_limit = 4;
    uint32 event_count_limit = 5;
    uint32 link_count_limit = 6;
  }
}

message MeterProvider {

  repeated MetricReader metric_readers = 1;

  message MetricReader {
    MetricReaderType reader = 1;

    enum MetricReaderType {
      UNSPECIFIED_AGGREGATION = 0;
      PERIODIC = 1;
      EXTENSION_READER = 2;
    }

    oneof metric_reader_args {
      // Ignored if metric_reader is not PERIODIC
      PeriodicMetricReaderArgs periodic_reader_args = 2;

      // Ignored if metric_reader is not EXTENSION
      ExtensionMetricReaderArgs extension_reader_args = 3;
    }

    message PeriodicMetricReaderArgs {

      MetricExporterType exporter = 1;

      enum MetricExporterType {
        UNSPECIFIED_EXPORTER = 0;
        OTLP = 1;
        EXTENSION_EXPORTER = 2;
      }

      oneof metric_exporter_args {
        OtlpMetricExporterArgs otlp_exporter_args = 2;
        ExtensionMetricExporterArgs extension_exporter_args = 3;
      }

      message OtlpMetricExporterArgs {
        string endpoint = 1;
        bool insecure = 2;
        string certificate = 3;
        string client_key = 4;
        string client_certificate = 5;
        map<string, string> headers = 6;
        string compression = 7;
        string protocol = 8;
      }

      message ExtensionMetricExporterArgs {
        string name = 1;
        map<string, ArgsValue> args = 2;
      }

      uint64 interval_millis = 4;
    }

    message ExtensionMetricReaderArgs {
      string name = 1;
      map<string, ArgsValue> args = 2;
    }
  }

  repeated RegisteredView views = 2;

  message RegisteredView {

    Selector selector = 1;

    message Selector {
      string instrument_name = 1;
      InstrumentType instrument_type = 2;

      enum InstrumentType {
        UNSPECIFIED_INSTRUMENT_TYPE = 0;
        COUNTER = 1;
        ASYNCHRONOUS_COUNTER = 2;
        UP_DOWN_COUNTER = 3;
        ASYNCHRONOUS_UP_DOWN_COUNTER = 4;
        ASYNCHRONOUS_GAUGE = 5;
        HISTOGRAM = 6;
      }

      string meter_name = 3;
      string meter_version = 4;
      string meter_schema_url = 5;

    }

    View view = 2;

    message View {
      string name = 1;
      string description = 2;

      Aggregation aggregation = 3;

      enum Aggregation {
        UNSPECIFIED_AGGREGATION = 0;
        DEFAULT = 1;
        DROP = 2;
        SUM = 3;
        LAST_VALUE = 4;
        EXPLICIT_BUCKET_HISTOGRAM = 5;
        EXPONENTIAL_BUCKET_HISTOGRAM = 6;
      }

      oneof aggregation_args {
        // Ignored if aggregation is not EXPLICIT_BUCKET_HISTOGRAM
        ExplicitBucketHistogramArgs explicit_bucket_histogram_aggregation_args = 4;

        // Ignored if aggregation is not EXPONENTIAL_BUCKET_HISTOGRAM
        ExponentialBucketHistogramArgs exponential_bucket_histogram_aggregation_args = 5;
      }

      message ExplicitBucketHistogramArgs {
        repeated double bucket_boundaries = 1;
      }

      message ExponentialBucketHistogramArgs {
        uint32 num_buckets = 1;
      }

      repeated string attribute_keys = 6;
    }
  }
}

message LoggerProvider {
  repeated LogRecordProcessor log_record_processors = 1;

  message LogRecordProcessor {

    LogRecordProcessorType processor = 1;

    enum LogRecordProcessorType {
      UNSPECIFIED_PROCESSOR = 0;
      BATCH = 1;
      SIMPLE = 2;
      EXTENSION_PROCESSOR = 3;
    }

    oneof log_processor {
      // Ignored if processor is not BATCH
      BatchLogRecordProcessorArgs batch_processor_args = 2;

      // Ignored if processor is not SIMPLE
      SimpleLogRecordProcessorArgs simple_processor_args = 3;

      // Ignored if processor is not EXTENSION
      ExtensionLogRecordProcessorArgs extension_processor_args = 4;
    }

    message SimpleLogRecordProcessorArgs {
      LogRecordExporterType exporter = 1;

      oneof span_exporter_args {
        // Ignored if exporter is not OTLP
        OtlpLogRecordExporterArgs otlp_exporter_args = 2;

        // Ignored if exporter is not EXTENSION
        ExtensionLogRecordExporterArgs extension_exporter_args = 3;
      }
    }

    message BatchLogRecordProcessorArgs {
      LogRecordExporterType exporter = 1;

      oneof log_record_exporter_args {
        // Ignored if exporter is not OTLP
        OtlpLogRecordExporterArgs otlp_exporter_args = 2;


        // Ignored if exporter is not EXTENSION
        ExtensionLogRecordExporterArgs extension_exporter_args = 3;
      }

      uint32 max_queue_size = 5;
      uint32 scheduled_delay_millis = 6;
      uint32 export_timeout_millis = 7;
      uint32 max_export_batch_size = 8;
    }

    message ExtensionLogRecordProcessorArgs {
      string name = 1;
      map<string, ArgsValue> args = 2;
    }

    enum LogRecordExporterType {
      UNSPECIFIED_EXPORTER = 0;
      OTLP = 1;
      EXTENSION_EXPORTER = 2;
    }

    message OtlpLogRecordExporterArgs {
      string endpoint = 1;
      bool insecure = 2;
      string certificate = 3;
      string client_key = 4;
      string client_certificate = 5;
      map<string, string> headers = 6;
      string compression = 7;
      string protocol = 8;
    }

    message ExtensionLogRecordExporterArgs {
      string name = 1;
      map<string, ArgsValue> args = 2;
    }
  }
}

