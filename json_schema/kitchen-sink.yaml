# This demonstrates a file configuration that falls out naturally from the SDK configuration options defined in the specification.
# The configuration shown is a "kitchen sink" example, with all the available options shown for demonstration purposes.

# User defined reusable elements
shared:
  # Define anchor for OTLP export args for reuse across signals
  otlp_args: &otlpArgs
    protocol: grpc
    endpoint: http://localost:4317
    headers:
      # TODO: Replace with environment variable when parsing to avoid storing secret in plain text
      api-key: 1234
    compression: gzip
    timeout_millis: 30_000

# SDK configuration.
sdk:
  # Whether the SDK is enabled or not.
  disabled: false
  # The resource, shared across providers
  resource:
    # List of enabled resource detectors. Each detector has a name (FQCN for java), and an optional list of excluded keys. Detector name supports wildcard syntax. Detectors are invoked and merged sequentially. Static attributes and schema_url comprise a resource which is merged last.
    detectors:
      - name: com.domain.resources.CustomResourceProvider
      - name: io.opentelemetry.sdk.extension.resources.*
        excluded_attribute_keys:
          # Exclude process.command_line, which is often verbose and may contain secrets
          - process.command_line
    # List of static resource attribute key / value pairs.
    attributes:
      service.name: my-service
      service.instance.id: 1234
    # The resource schema URL.
    schema_url: http://schema.com
  # Configure SDK logging.
  logging:
    level: info
  # General attribute limits, applies to span and log attributes.
  attribute_limits:
    attribute_count_limit: 10
    attribute_value_length_limit: 100
  # Tracer provider configuration.
  tracer_provider:
    # List of span processors, to be added sequentially. Each span processor has a name and args used to configure it.
    span_processors:
      # Add simple span processor configured to export with the logging exporter.
      - name: simple
        args:
          # Simple span processor takes exporter as an arg, which is composed of a name an args used to configure it.
          exporter:
            name: logging
      # Add batch span processor configured to export with the OTLP exporter.
      - name: batch
        args:
          # Batch span processor takes exporter as an arg, which is composed of a name an args used to configure it.
          exporter:
            name: otlp
            # Reference the shared.otlp_args anchor defined earlier in the file.
            args: *otlpArgs
          # Configure batch span processor batch size and interval settings.
          max_queue_size: 100
          scheduled_delay_millis: 1_000
          export_timeout_millis: 30_000
          max_export_batch_size: 200
    # The sampler. Each sampler has a name and args used to configure it.
    sampler:
      name: parentbased
      args:
        # The parentbased sampler takes root_sampler as an arg, is another sampler itself.
        root_sampler:
          name: traceidratio
          args:
            ratio: 0.01
    # The span limits.
    span_limits:
      # Merge general attribute limits with span specific limits.
      attribute_count_limit: 20
      attribute_value_length_limit: 200
      # Span specific limits.
      attribute_count_per_event_limit: 5
      attribute_count_per_link_limit: 5
      event_count_limit: 10
      link_count_limit: 4
  # Meter provider configuration.
  meter_provider:
    # List of metric readers. Each metric reader has a name and args used to configure it.
    metric_readers:
      # Add periodic metric reader configured to export with the logging exporter using the default interval settings.
      - name: periodic
        args:
          # Periodic metric reader takes exporter as an arg, which is composed of a name an args used to configure it.
          exporter:
            name: logging
      # Add periodic metric reader configured to export with the otlp exporter every 5_000 ms.
      - name: periodic
        args:
          # Periodic metric reader takes exporter as an arg, which is composed of a name an args used to configure it.
          exporter:
            name: otlp
            # Reference the shared.otlp_args anchor defined earlier in the file.
            args: *otlpArgs
          # Configure periodic metric reader interval.
          interval_millis: 5_000
    # List of views. Each view consists of a selector defining criteria for which instruments are selected, and a view defining the resulting metric.
    views:
      # Add a "kitchen sink" view, using all selector fields, and using all configurable aspects of the view.
      - selector:
          # Select instruments with this name, including wildcard matching.
          instrument_name: my-instrument
          # Select instruments with this type.
          instrument_type: COUNTER
          # Select instruments with this meter name.
          meter_name: my-meter
          # Select instruments with this meter version.
          meter_version: 1.0.0
          # Select instruments with this meter schema url.
          meter_schema_url: http://example.com
        view:
          # Change the metric name.
          name: new-instrument-name
          # Change the metric description.
          description: new-description
          # Change the aggregation. In this case, use an explicit bucket histogram with bucket boundaries [1.0, 2.0, 5.0].
          aggregation:
            name: explicit_bucket_histogram
            args:
              bucket_boundaries: [1.0, 2.0, 5.0]
          # List of attribute keys to retain. Keys included on measurements and not in this list will be ignored.
          attribute_keys:
            - foo
            - bar
      # Add a simpler view, which configures the drop aggregation for instruments whose name matches "*.server.duration".
      - selector:
          instrument_name: "*.server.duration"
        view:
          aggregation:
            name: drop
  # Logger provider configuration.
  logger_provider:
    # List of log processors, to be added sequentially. Each log processor has a name and args used to configure it.
    log_record_processors:
      # Add batch log processor configured to export with the OTLP exporter.
      - name: batch
        args:
          # Batch log processor takes exporter as an arg, which is composed of a name an args used to configure it.
          exporter:
            name: otlp
            # Reference the shared.otlp_args anchor defined earlier in the file.
            args: *otlpArgs
          # Configure batch log processor batch size and interval settings.
          max_queue_size: 50
          scheduled_delay_millis: 1_000
          export_timeout_millis: 30_000
          max_export_batch_size: 200
  # List of context propagators. Each propagator has a name and args used to configure it. None of the propagators here have configurable options so args are not demonstrated.
  propagators:
    - name: tracecontext
    - name: baggage
# Undefined placeholder for instrumentation specific configuration. Need to define how instrumentation is configured in a language agnostic way.
instrumentation:
